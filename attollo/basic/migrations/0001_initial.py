# Generated by Django 3.2 on 2021-04-28 14:56

import basic.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_resized.forms
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fname', models.CharField(max_length=30, verbose_name='First Name')),
                ('lname', models.CharField(max_length=30, verbose_name='Last Name')),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='School Name')),
                ('county', models.CharField(blank=True, max_length=30, verbose_name='County')),
                ('district', models.CharField(blank=True, max_length=30, verbose_name='District')),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='basic.person')),
                ('email', models.EmailField(max_length=40, verbose_name='Email')),
            ],
            bases=('basic.person',),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('data_id', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='basic.person')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='basic.person')),
                ('email', models.EmailField(max_length=40, null=True, verbose_name='Email')),
                ('phonenum', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Phone Number')),
                ('dob', models.DateField(null=True, verbose_name='Date of Birth')),
                ('gradyear', models.IntegerField(validators=[django.core.validators.MinValueValidator(2013), basic.models.max_value_current_year], verbose_name='Graduation Year')),
                ('gender', models.CharField(max_length=30, null=True, verbose_name='Gender')),
                ('image', django_resized.forms.ResizedImageField(blank=True, crop=None, force_format=None, keep_meta=True, null=True, quality=100, size=[300, 150], upload_to='profile_image', verbose_name='Profile Picture')),
                ('race', models.CharField(max_length=30, null=True, verbose_name='Race')),
                ('address', models.CharField(max_length=60, null=True, verbose_name='Address')),
                ('shirt', models.CharField(choices=[('S', 'S'), ('M', 'M'), ('L', 'L'), ('XL', 'XL'), ('XXL', 'XXL')], max_length=3, verbose_name='Shirt Size')),
                ('short', models.CharField(choices=[('S', 'S'), ('M', 'M'), ('L', 'L'), ('XL', 'XL'), ('XXL', 'XXL')], max_length=3, null=True, verbose_name='Short Size')),
                ('student_ig', models.CharField(blank=True, max_length=30, null=True, verbose_name='Instagram Username')),
                ('favcandy', models.CharField(blank=True, max_length=30, null=True, verbose_name='Favorite Candy')),
                ('guard1fname', models.CharField(max_length=30, null=True, verbose_name='Guardian 1 First Name')),
                ('guard1lname', models.CharField(max_length=30, null=True, verbose_name='Guardian 1 Last Name')),
                ('guard1phonenum', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Guardian 1 Phone Number')),
                ('guard1email', models.EmailField(max_length=40, null=True, verbose_name='Guardian 1 Email')),
                ('guard1occ', models.CharField(blank=True, max_length=40, null=True, verbose_name='Guardian 1 Occupation')),
                ('guard1shirt', models.CharField(blank=True, choices=[('S', 'S'), ('M', 'M'), ('L', 'L'), ('XL', 'XL'), ('XXL', 'XXL')], max_length=3, null=True, verbose_name='Guardian 1 Shirt Size')),
                ('guard2fname', models.CharField(blank=True, max_length=30, null=True, verbose_name='Guardian 2 First Name')),
                ('guard2lname', models.CharField(blank=True, max_length=30, null=True, verbose_name='Guardian 2 Last Name')),
                ('guard2phonenum', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Guardian 2 Phone Number')),
                ('guard2email', models.EmailField(blank=True, max_length=40, null=True, verbose_name='Guardian 2 Email')),
                ('guard2occ', models.CharField(blank=True, max_length=40, null=True, verbose_name='Guardian 2 Occupation')),
                ('guard2shirt', models.CharField(blank=True, choices=[('S', 'S'), ('M', 'M'), ('L', 'L'), ('XL', 'XL'), ('XXL', 'XXL')], max_length=3, null=True, verbose_name='Guardian 2 Shirt Size')),
                ('emergcontact', models.CharField(max_length=50, null=True, verbose_name='Emergency Contact')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Additional Comments')),
                ('schoolid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='basic.school', verbose_name='School')),
            ],
            bases=('basic.person',),
        ),
    ]
